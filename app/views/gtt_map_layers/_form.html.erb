<%= error_messages_for 'map_layer' %>

<div class="box tabular">
  <p>
    <%= f.text_field :name, required: true, size: 25 %>
    <em id="map_layer_load_example" class="info"><b><%= t('map_layer.load_example') %></b></em>
  </p>
  <p><%= f.check_box :baselayer %></p>
  <p><%= f.check_box :global %></p>
  <p><%= f.check_box :default %></p>
  <p>
    <%= f.select :layer,
      options_for_select(
        ['Image','Tile','MapboxVector','Vector','VectorTile','WebGLTile'],
        selected: f.object.layer ),
      { include_blank: t('map_layer.layer_options_select'), required: true }
    %>
  </p>
  <p>
    <%= f.text_area :layer_options_string, rows: 4, cols: 80 %>
  </p>
  <p>
    <%= f.select :source,
      options_for_select(
        ['BingMaps','CartoDB','Google','ImageStatic','ImageWMS','OSM','Raster','Stamen',
         'TileJSON','TileWMS','UTFGrid','Vector','VectorTile','WMTS','XYZ'],
        selected: f.object.source ),
      { include_blank: t('map_layer.source_options_select') }
    %>
  </p>
  <p>
    <%= f.text_area :source_options_string, rows: 8, cols: 80 %>
  </p>
  <p>
    <%= f.select :format,
      options_for_select(
        ['GeoJSON','GPX','KML','MVT','TopoJSON','WFS','WKB','WKT'],
        selected: f.object.format ),
      { include_blank: t('map_layer.format_options_select') }
    %>
  </p>
  <p>
    <%= f.text_area :format_options_string, rows: 4, cols: 80 %>
  </p>
  <!--p>
    <%= f.text_area :styles, rows: 4, cols: 80 %>
  </p-->
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const map_layer_config = {
      'Image': ['ImageStatic','ImageWMS','Raster'],
      'Tile': ['BingMaps','CartoDB','OSM','Stamen','TileJSON','TileWMS','UTFGrid','WMTS','XYZ'],
      'MapboxVector': [],
      'Vector': ['Vector'],
      'VectorTile': ['VectorTile'],
      'WebGLTile': ['Google'],
    };

    const map_format_config = {
      'Vector': ['GeoJSON','GPX','KML','WFS','WKB','WKT'],
      'VectorTile': ['MVT','TopoJSON'],
    };

    const map_style_config = ['Vector','VectorTile'];

    const layerTypeSelect = document.getElementById('map_layer_layer');
    const sourceTypeSelect = document.getElementById('map_layer_source');
    const formatTypeSelect = document.getElementById('map_layer_format');

    function updateSourceTypeOptions() {
      const selectedLayer = layerTypeSelect.value;
      const availableSourceTypes = map_layer_config[selectedLayer] || [];
      let autoSelectOption = null;

      for (const option of sourceTypeSelect.options) {
        if (availableSourceTypes.includes(option.value)) {
          option.style.display = 'block';
          if (!autoSelectOption) {
            autoSelectOption = option;
          }
        } else {
          option.style.display = 'none';
        }
      }

      if (autoSelectOption && (sourceTypeSelect.value === '' || !availableSourceTypes.includes(sourceTypeSelect.value))) {
        sourceTypeSelect.value = autoSelectOption.value;
      } else if (!autoSelectOption) {
        sourceTypeSelect.value = ''; // Reset the value when no options are available
        document.getElementById("map_layer_source_options_string").innerHTML = "";
      }

      sourceTypeSelect.disabled = availableSourceTypes.length === 0;
      document.getElementById('map_layer_source_options_string').disabled = sourceTypeSelect.disabled;

      updateFormatTypeOptions(); // Trigger format options update
    }

    function updateFormatTypeOptions() {
      const selectedSource = sourceTypeSelect.value;
      const availableFormatTypes = map_format_config[selectedSource] || [];
      let autoSelectOption = null;

      for (const option of formatTypeSelect.options) {
        if (availableFormatTypes.includes(option.value)) {
          option.style.display = 'block';
          if (!autoSelectOption) {
            autoSelectOption = option;
          }
        } else {
          option.style.display = 'none';
        }
      }

      if (autoSelectOption && (formatTypeSelect.value === '' || !availableFormatTypes.includes(formatTypeSelect.value))) {
        formatTypeSelect.value = autoSelectOption.value;
      } else if (!autoSelectOption) {
        formatTypeSelect.value = ''; // Reset the value when no options are available
        document.getElementById("map_layer_format_options_string").innerHTML = "";
      }

      formatTypeSelect.disabled = availableFormatTypes.length === 0;
      document.getElementById('map_layer_format_options_string').disabled = formatTypeSelect.disabled;

      // updateStyleSettings(); // Trigger style settings update
    }

    function updateStyleSettings() {
      const selectedLayer = layerTypeSelect.value;
      const styleSettingsTextarea = document.getElementById('map_layer_styles');

      if (map_style_config.includes(selectedLayer)) {
        styleSettingsTextarea.disabled = false;
      } else {
        styleSettingsTextarea.disabled = true;
      }
    }

    layerTypeSelect.addEventListener('change', updateSourceTypeOptions);
    sourceTypeSelect.addEventListener('change', updateFormatTypeOptions);

    updateSourceTypeOptions();
    updateFormatTypeOptions();
    // updateStyleSettings();

    function appendLinksToLoadExamples() {
      const linksContainer = document.getElementById("map_layer_load_example");

      map_layer_examples.forEach(item => {
        const link = document.createElement("a");
        link.href = "#";
        link.textContent = item.name;
        link.addEventListener("click", () => {
          // Fill the layer options
          document.getElementById("map_layer_layer_options_string").innerHTML = item.layer_options ? JSON.stringify(item.layer_options, undefined, 2) : "";

          // Fill the source options
          document.getElementById("map_layer_source_options_string").innerHTML = item.source_options ? JSON.stringify(item.source_options, undefined, 2) : "";

          // Fill the format options
          document.getElementById("map_layer_format_options_string").innerHTML = item.format_options ? JSON.stringify(item.format_options, undefined, 2) : "";

          // Select the correct layer type
          document.getElementById("map_layer_layer").value = item.layer ? item.layer : "";

          // Select the correct source type
          document.getElementById("map_layer_source").value = item.source ? item.source : "";

          // Select the correct format type
          document.getElementById("map_layer_format").value = item.format ? item.format : "";

          // Select the name
          document.getElementById("map_layer_name").value = item.name ? item.name : "";

          updateSourceTypeOptions();
          updateFormatTypeOptions();
          // updateStyleSettings();
        });
        linksContainer.appendChild(link);
        linksContainer.appendChild(document.createTextNode(", "));
      });
    }

    appendLinksToLoadExamples();
  });

  const map_layer_examples = [{
    'name': 'OSM Tiles',
    'layer': 'Tile',
    'layer_options': {},
    'source': 'OSM',
    'source_options': {
      'url': 'https://tile.openstreetmap.jp/{z}/{x}/{y}.png',
      'custom': '19/34.74701/135.35740',
      'crossOrigin': null,
      'attributions': '<a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap contributors</a>'
    },
    'format': '',
    'format_options': {}
  },{
    'name': 'OSM Vector Tiles',
    'layer': 'VectorTile',
    'layer_options': {
      'styleUrl': 'https://tile.openstreetmap.jp/styles/osm-bright-ja/style.json',
      'declutter': true
    },
    'source': 'VectorTile',
    'source_options': {
      'attributions': '<a href="https://www.openmaptiles.org/" target="_blank">OpenMapTiles</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap contributors</a>'
    },
    'format': 'ol.format.MVT',
    'format_options': {}
  },{
    'name': 'Google Maps',
    'layer': 'WebGLTile',
    'layer_options': {},
    'source': 'Google',
    'source_options': {
      'key': 'YOUR_API_KEY',
      'scale': 'scaleFactor2x',
      'highDpi': true,
    },
    'format': '',
    'format_options': {}
  }];
</script>
